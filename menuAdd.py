# Form implementation generated from reading ui file 'menuAdd.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
import mysql.connector as mc
from datetime import datetime
from ingUI import ing_Dialog
from PyQt6.QtGui import QPixmap


class Menu_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(407, 300)
        self.pushButton__act = QtWidgets.QPushButton(Dialog)
        self.pushButton__act.setGeometry(QtCore.QRect(140, 250, 251, 31))
        self.pushButton__act.setStyleSheet("border-radius: 15px;\n"
"background-color:rgb(226, 230, 234)")
        self.pushButton__act.setObjectName("pushButton__act")
        self.line_menu = QtWidgets.QLineEdit(Dialog)
        self.line_menu.setGeometry(QtCore.QRect(20, 20, 261, 31))
        self.line_menu.setStyleSheet("border-radius: 15px;\n"
"")
        self.line_menu.setObjectName("line_menu")
        self.line_men_cant = QtWidgets.QLineEdit(Dialog)
        self.line_men_cant.setGeometry(QtCore.QRect(20, 250, 101, 31))
        self.line_men_cant.setStyleSheet("border-radius: 15px;\n"
"")
        self.line_men_cant.setObjectName("line_men_cant")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(30, 60, 101, 31))
        self.label.setObjectName("label")
        self.label_user = QtWidgets.QLabel(Dialog)
        self.label_user.setGeometry(QtCore.QRect(310, 70, 71, 21))
        self.label_user.setObjectName("label_user")
        self.toolButton_add_ing = QtWidgets.QToolButton(Dialog)
        self.toolButton_add_ing.setGeometry(QtCore.QRect(130, 60, 41, 31))
        self.toolButton_add_ing.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/add-100.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_add_ing.setIcon(icon)
        self.toolButton_add_ing.setIconSize(QtCore.QSize(32, 32))
        self.toolButton_add_ing.setObjectName("toolButton_add_ing")
        self.listWidget = QtWidgets.QListWidget(Dialog)
        self.listWidget.setGeometry(QtCore.QRect(20, 100, 361, 91))
        self.listWidget.setObjectName("listWidget")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(9, 250, 21, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(310, 10, 81, 61))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap(":/images/sushi-64.png"))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(20, 200, 111, 41))
        self.label_4.setObjectName("label_4")
        self.line_menu_2 = QtWidgets.QLineEdit(Dialog)
        self.line_menu_2.setGeometry(QtCore.QRect(130, 200, 261, 41))
        self.line_menu_2.setStyleSheet("border-radius: 15px;\n"
                                       
"")
        self.line_menu_2.setObjectName("line_menu_2")
        self.label_user_img = QtWidgets.QLabel(Dialog)
        self.label_user_img.setGeometry(QtCore.QRect(300, 0, 71, 61))
        self.label_user_img.setObjectName("label_user_img")
        self.toolButton_add_ing.clicked.connect(self.listWidget.clear)
        self.toolButton_add_ing.clicked.connect(self.crear_menu_temp)
        self.toolButton_add_ing.clicked.connect(self.get_men)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Menu"))
        self.pushButton__act.setText(_translate("Dialog", "aceptar"))
        self.line_menu.setPlaceholderText(_translate("Dialog", "nombre del plato"))
        self.line_men_cant.setPlaceholderText(_translate("Dialog", "Precio del plato"))
        self.label.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:18pt;\">Ingredientes</span></p></body></html>"))
        self.label_2.setText(_translate("Dialog", "$"))
        self.label_4.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:18pt;\">Descripcion:</span></p></body></html>"))
        self.line_menu_2.setPlaceholderText(_translate("Dialog", "opcional"))
        self.label_user_img.setPixmap(QPixmap("images/japanese-64.png"))

    def crear_menu_temp(self):
        loged = self.is_log()
        if loged == 'on':
            try:
                dbconfig = {
                    'user': 'root',
                    'password': 'admin123',
                    'host': '127.0.0.1',
                    'database': 'hikaru'
                }
                nom = self.line_menu.text()

                mydb = mc.connect(**dbconfig)
                mycursor = mydb.cursor()
                print(nom)
                query = "INSERT INTO hikaru.menu (nombre, descr, precio) VALUES (%s, null, null);"
                values = (nom)
                mycursor.execute(query, values)
                mydb.commit()

            except mc.Error as e:
                print(e)
        else:
            print("not loged")

    def get_men(self):
        try:
            dbconfig = {
                'user': 'root',
                'password': 'admin123',
                'host': '127.0.0.1',
                'database': 'hikaru'
            }
            mydb = mc.connect(**dbconfig)
            mycursor = mydb.cursor()
            query = "SELECT nombre from "
            mycursor.execute(query)
            result = mycursor.fetchall()
            if len(result) >= 0:
                for i in range(len(result)):
                    men = result[i][0]
                    print("asd" + men)
                    self.list_orden.addItem(result[i][0] + "     cant: '" + str(result[i][1]) + "'")
                    i += 1
            else:
                self.list_orden.addItem("no hay nada en el menu")
        except mc.Error as e:
            print(e)

    def is_log(self):
        try:
            dbconfig = {
                'user': 'root',
                'password': 'admin123',
                'host': '127.0.0.1',
                'database': 'hikaru'
            }
            user = self.label_user.text()
            mydb = mc.connect(**dbconfig)
            mycursor = mydb.cursor()
            query = "SELECT is_log FROM users WHERE username like '" + user + "'"
            mycursor.execute(query)
            result = mycursor.fetchone()
            if result == None:
                loged = "off"

            else:
                loged = result[0]
                print(result[0])
        except mc.Error as e:
            print(e)
        return loged
